import numpy as np
import para_init as para_init

para = {
    # 'device': "cpu",
    'device': "gpu",
    
    'num_nodes': 2, # BNML变量个数
    'list_node_type': ["D", "D"], # 列表: C表示连续变量，D表示离散变量
    'list_node_label': ["V", "V"],
    'list_cardinalities': [3, 2], # 列表: 1表示连续变量的势，1~n表示离散变量的势
    'list_latent_variables': [0, 0], # 列表: 0表示显变量，1表示隐变量
    'list_edges': [], # 列表: 初始边的集合
    'list_may_edges': [],
    # 'list_edges': [[1, 2]], # 列表: 初始边的集合

    # 'num_nodes': 3, # BNML变量个数
    # 'list_node_type': ["D", "D", "D"], # 列表: C表示连续变量，D表示离散变量
    # 'list_cardinalities': [3, 2, 2], # 列表: 1表示连续变量的势，1~n表示离散变量的势
    # 'list_latent_variables': [0, 0, 0], # 列表: 0表示显变量，1表示隐变量
    # # 'list_edges': [], # 列表: 初始边的集合
    # 'list_edges': [[1, 2], [3, 2]], # 列表: 初始边的集合

    'list_evidence_node': [2],
    'list_search_node': [1],


    'num_k2_edges': 100,


    'train': 1.0, # 训练集的比例
    'batch_size': 1024,
    'train_size': -1,
    'test_size': -1,
    'lr': 1e-2,
    'activation' : 'sigmoid',
    'BN_parameter_learning_max_iter_num': 3000,
    'BN_max_convergence_iter_num': 25,

    # 'AE_parameter_learning_max_iter_num': 1000,
    # 'AE_parameter_learning_max_iter_num': 400, # child sample=100 L=2 VQVAE=6
    # 'AE_parameter_learning_max_iter_num': 2000, # child sample=100 L=2 VQVAE=6
    'AE_parameter_learning_max_iter_num': 1500, # child sample=1000+100 L=3 VQVAE=12

    'AE_max_convergence_iter_num': 1000,

    'structure_learning_max_iter_num': 10,

    # 'train_min_lr' : 0.01,
    # 'train_lr_decay_factor': 0.5,
    # 'train_early_stopping_patience': 100,
    # 'train_decay_patience':  20,

    'MAP_max_iter_num': 50,
    'MAP_max_convergence_iter_num': 50,

    'print_interval': 100,

    # 'input_type': 'discrete',
    'input_type': 'one-hot',

    'output_type': 'D',
    # 'output_type': 'continuous',

    'EM': 'False',
    # 'EM': 'True',

    'prior': 'False',
    # 'prior': 'True',


    'Train': 'True',
    # 'Train': 'False',

    'Save_model': True,
    # 'Save_model': False,

    # 'MAP_Norm': 'Softmax',
    'MAP_Norm': 'Relu',
    # 'MAP_Norm': 'Sigmoid',

    'data_file': 'child',
    'num_sample': 1000,

    'file_name_train': 'train1.dat',
    'file_name_test': 'test.dat',
    'file_name_2': '.dat',

    'BN_loss_ratio': 1e-3,
}


def func(para, stage = None):
    para['constraint_may_edges'] = np.ones((para['num_nodes'], para['num_nodes']), dtype = int, order='C')



    para['data_file'] = para_init.bn
    print(para_init.bn)
    para['num_sample'] = para_init.num_sample
    # exit(0)

    para['file_name_feature'] = None
    para['file_name_train'] = para_init.bn + '.xlsx'
    # para['file_name_test'] = 'ratings10.txt'

    para['num_sample'] = para_init.num_sample
    para['batch_size'] = 204800
    # para['batch_size'] = 1024

    # para['userNum'] = 6040
    # para['itemNum'] = 3952
    # para['itemNum'] = 3645

    para['num_VQVAE'] = 1

    if para_init.bn == 'child':
        car_var = [2, 6, 2, 2, 2, 3, 3, 3, 3, 2, 5, 5, 2, 2, 4, 3, 3, 3, 2, 3]
    elif para_init.bn == 'water':
        car_var = [3, 3, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
    elif para_init.bn == 'munin1':
        car_var = [5, 4, 5, 4, 4, 7, 6, 6, 6, 2, 2, 2, 3, 5, 5, 5, 6, 6, 6, 3, 3, 3, 3, 4, 4, 4, 2, 2, 2, 3, 3, 3, 6, 6, 6, 4, 4, 4, 5, 4, 4, 3, 3, 3, 4, 5, 4, 4, 6, 6, 3, 3, 2, 2, 6, 6, 5, 5, 5, 5, 4, 4, 5, 5, 4, 4, 6, 5, 4, 3, 3, 3, 6, 3, 2, 4, 5, 6, 5, 5, 4, 4, 5, 5, 4, 5, 3, 4, 4, 3, 4, 5, 5, 5, 4, 4, 9, 9, 19, 4, 9, 9, 20, 5, 5, 5, 5, 4, 4, 4, 6, 15, 4, 9, 12, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 3, 3, 3, 3, 3, 2, 2, 2, 2, 7, 7, 4, 4, 4, 2, 2, 4, 4, 5, 4, 5, 2, 2, 6, 6, 6, 7, 7, 3, 2, 7, 3, 19, 7, 5, 20, 6, 3, 5, 5, 6, 2, 4, 4, 9, 9, 19, 4, 10, 10, 19, 5, 5, 6, 4, 9, 21, 6, 17, 5, 12]
    elif para_init.bn == 'pigs':
        car_var = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,]
    else:
        exit(0)

    para['node_type'] = [["D" for i in range(para_init.num_latent)]]
    para['node_cardinalities'] = [car_var[:para_init.num_latent]]
    print(para['node_cardinalities']) # [[2, 6, 2]]
    print(para['node_type']) # [['D', 'D', 'D']]
    # exit(0)


    para['sum_node_cardinalities'] = [] #隐变量的组合数
    para['node_cardinalities_combinations'] = [] # 每个隐变量对应之前隐变量的组合数
    for n in range(para['num_VQVAE']):
        para['sum_node_cardinalities'].append(np.prod(para['node_cardinalities'][n]))
        para['node_cardinalities_combinations'].append([0 for a in range(len(para['node_cardinalities'][n]))])
        for i in range(1, len(para['node_cardinalities'][n])):
            com = 1
            for j in range(0, i):
                com *= para['node_cardinalities'][n][j]
            para['node_cardinalities_combinations'][n][i] = com

    print(para['sum_node_cardinalities']) # [24]
    print(para['node_cardinalities_combinations']) # [[0, 2, 12]]
    #
    #
    # exit(0)



    para['hidden_dim_VQVAE'] = [8]
    para['hidden_embeddings_dim_VQVAE'] = [8]

    if para_init.bn == 'child':
        if para_init.num_latent == 1:
            para['k_VQVAE'] = [2] # child sample=100 L=2 VQVAE=6
            para['AE_parameter_learning_max_iter_num'] = 200
        elif para_init.num_latent == 2:
            # para['k_VQVAE'] = [6] # child sample=100 L=2 VQVAE=6
            # para['AE_parameter_learning_max_iter_num'] = 3000

            # para['k_VQVAE'] = [20]
            # para['AE_parameter_learning_max_iter_num'] = 4300  # BCE_X= 0.015534 MSE_X= 0.005083
            para['k_VQVAE'] = [16]
            para['AE_parameter_learning_max_iter_num'] = 1900 # BCE_X= 0.009078 MSE_X= 0.002990

            para['AE_parameter_learning_max_iter_num'] = 100  # BCE_X= 0.009078 MSE_X= 0.002990
        elif para_init.num_latent == 3:
            # para['k_VQVAE'] = [2]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2000
            # para['k_VQVAE'] = [4]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2200
            para['k_VQVAE'] = [12]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 3100
            # para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2700
            # para['k_VQVAE'] = [28]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 3000
            # para['k_VQVAE'] = [36]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 3000

            para['AE_parameter_learning_max_iter_num'] = 100  # BCE_X= 0.009078 MSE_X= 0.002990
        elif para_init.num_latent == 4:
            # para['k_VQVAE'] = [16]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 5000  # epoch: 5000 VQVAE_loss: 0.023005 BCE_X= 0.021228 MSE_X= 0.007295
            para['k_VQVAE'] = [18]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 4900    # epoch: 4900 VQVAE_loss: 0.010206 BCE_X= 0.006067 MSE_X= 0.002064
            # para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 900   # epoch: 900 VQVAE_loss: 0.022157 BCE_X= 0.007793 MSE_X= 0.002466

        elif para_init.num_latent == 5:
            para['k_VQVAE'] = [16]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 2100
        elif para_init.num_latent == 7:
            para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 3000
        elif para_init.num_latent == 9:
            para['k_VQVAE'] = [24]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 1500

    elif para_init.bn == 'water':
        if para_init.num_latent == 1:
            para['k_VQVAE'] = [3] # child sample=100 L=2 VQVAE=6
            para['AE_parameter_learning_max_iter_num'] = 200  # 0.0031
        elif para_init.num_latent == 2:
            para['k_VQVAE'] = [12]
            para['AE_parameter_learning_max_iter_num'] = 3300  # BCE_X= 0.015534 MSE_X= 0.005083
        elif para_init.num_latent == 3:
            # para['k_VQVAE'] = [2]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2000
            # para['k_VQVAE'] = [4]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2500
            para['k_VQVAE'] = [12]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 1500
            # para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2400
            # para['k_VQVAE'] = [28]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 800
            # para['k_VQVAE'] = [36]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 3000

            para['AE_parameter_learning_max_iter_num'] = 100  # BCE_X= 0.009078 MSE_X= 0.002990
        elif para_init.num_latent == 4:
            para['k_VQVAE'] = [12]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 1500
        elif para_init.num_latent == 5:
            para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 2100 # 0.0031
        elif para_init.num_latent == 7:
            para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 3000 # 0.0031


    elif para_init.bn == 'munin1':
        if para_init.num_latent == 1:
            para['k_VQVAE'] = [5]  # child sample=100 L=2 VQVAE=6
            para['AE_parameter_learning_max_iter_num'] = 700  # 0.0031
        elif para_init.num_latent == 2:
            para['k_VQVAE'] = [100]
            para['AE_parameter_learning_max_iter_num'] = 2000 # epoch: 5000 VQVAE_loss: 0.004934 BCE_X= 0.003025 MSE_X= 0.000922
        elif para_init.num_latent == 3:
            # para['k_VQVAE'] = [2]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2000
            # para['k_VQVAE'] = [4]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 700
            # para['k_VQVAE'] = [12]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 3000

            # para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2800


            para['k_VQVAE'] = [28]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 2900
            # para['k_VQVAE'] = [36]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 3000

            para['AE_parameter_learning_max_iter_num'] = 100  # BCE_X= 0.009078 MSE_X= 0.002990
        elif para_init.num_latent == 4:
            para['k_VQVAE'] = [28]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 2900
        elif para_init.num_latent == 5:
            para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 2100 # 0.0031
        elif para_init.num_latent == 7:
            para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 3000 # 0.0031


    elif para_init.bn == 'pigs':
        if para_init.num_latent == 1:
            para['k_VQVAE'] = [3]  # child sample=100 L=2 VQVAE=6
            para['AE_parameter_learning_max_iter_num'] = 200  # 0.0031
        elif para_init.num_latent == 2:
            para['k_VQVAE'] = [12]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 5000
        elif para_init.num_latent == 3:
            # para['k_VQVAE'] = [14]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 5100
            # para['k_VQVAE'] = [16]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 5000  # Train loss: 0.040038
            # para['k_VQVAE'] = [18]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 5000 # Train loss: 0.040038

            # para['k_VQVAE'] = [2]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2000
            # para['k_VQVAE'] = [4]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 3000
            para['k_VQVAE'] = [12]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 1600
            # para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 3000
            # para['k_VQVAE'] = [28]  # L=3/4 sample=1000
            # para['AE_parameter_learning_max_iter_num'] = 2100

            para['AE_parameter_learning_max_iter_num'] = 100  # BCE_X= 0.009078 MSE_X= 0.002990
        elif para_init.num_latent == 4:
            para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 5000
        elif para_init.num_latent == 5:
            para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 2100 # 0.0031
        elif para_init.num_latent == 7:
            para['k_VQVAE'] = [20]  # L=3/4 sample=1000
            para['AE_parameter_learning_max_iter_num'] = 3000 # 0.0031


    para['dim_feature'] = []
    for a, b in zip(para['hidden_dim_VQVAE'], para['hidden_embeddings_dim_VQVAE']):
        para['dim_feature'].append(int(a/b))
    # print(para['dim_feature'])
    # exit(0)
    # para['layers_NPN'] = [1, 1] # 2^0
    # para['layers_NPN'] = [4, 4] # 2^4
    # para['layers_NPN'] = [16, 16] # 2^8

    # para['layers_NPN'] = [8, 8] # 2^4

    para['layers_NPN'] = [64, 64] # 2^12
    # para['layers_NPN'] = [256, 256] # 2^16

    # para['layers_NPN'] = [512, 512] # 2^16


    # para['layers_NPN'] = [128, 128] # 2^14
    # para['layers_NPN'] = [1024, 1024]  # 2^16
    # para['layers_NPN'] = [4096, 4096]  # 爆显存


    num_var = len(car_var)
    para['num_var'] = num_var
    para['num_nodes'] = num_var - para['num_VQVAE'] * (para_init.num_latent-1)   # BNML变量个数
    print('BNML_num_nodes: ' + str(para['num_nodes']))

    para['num_latent_variables'] = para['num_VQVAE'] * para_init.num_latent
    para['BN_file'] = 'BNML-' + str(para['num_nodes'])

    # para['VQVAE_node_label'] = ["0", "0", "0", "0",
    #                             "V", "V", "V", "V",
    #                             "V", "V", "V", "V",
    #                             "V", "V", "V", "V",
    #                             "V", "V", "V", "V"]
    # para['list_node_label'] = ["0",
    #                             "V", "V", "V", "V",
    #                             "V", "V", "V", "V",
    #                             "V", "V", "V", "V",
    #                             "V", "V", "V", "V"]
    # para['list_node_index_VQVAE'] = [1,
    #                                  5, 6, 7, 8,
    #                                  9, 10, 11, 12,
    #                                  13, 14, 15, 16,
    #                                  17, 18, 19, 20]
    para['VQVAE_node_label'] = []
    para['list_node_label'] = []
    para['list_node_index_VQVAE'] = []
    for i in range(para_init.num_latent):
        para['VQVAE_node_label'].append("0")
    para['list_node_label'].append("0")
    para['list_node_index_VQVAE'].append(1)
    for i in range(para_init.num_latent + 1, num_var + 1):
        para['VQVAE_node_label'].append("V")
        para['list_node_label'].append("V")
        para['list_node_index_VQVAE'].append(i)

    print(para['VQVAE_node_label'])       # ['0', '0', '0', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V']
    print(para['list_node_label'])        # ['0',           'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V', 'V']
    print(para['list_node_index_VQVAE'])  # [1,              4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    # exit(0)

    para['list_node_type'] = func_list_node_type(para['data_file'], stage, num_var)
    para['list_cardinalities'] = func_list_cardinalities(para['data_file'], stage, num_var, car_var)

    para['list_latent_variables'] = func_list_latent_variables(para['data_file'], stage, num_var)

    para['list_correspond_observed_variables'] = func_list_correspond_observed_variables(para['data_file'], stage, num_var) # 与隐变量有关的变量

    print(para['list_node_type'])                     # ['D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D']
    print(para['list_cardinalities'])                 # [12, 2, 2, 3, 3, 3, 3, 2, 5, 5, 2, 2, 4, 3, 3, 3, 2, 3]
    print(para['list_latent_variables'])              # [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    print(para['list_correspond_observed_variables']) # [0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    # exit(0)

    para['list_evidence_node_temp'] = []
    para['list_search_node_temp'] = []
    # 需要将除第1个隐变量外，其他隐变量的边删除
    if para_init.bn == 'child':
        if para_init.num_latent == 1:
            para['list_edges'] = [[1, 2], [3, 4], [5, 6], [5, 13], [7, 11], [8, 9], [8, 11], [8, 13], [8, 16], [9, 10], [11, 12], [13, 14], [15, 16], [15, 19], [16, 17], [16, 20], [18, 19], [19, 20]]
        elif para_init.num_latent == 2:
            # para['list_edges'] = [[1, 3], [5, 6], [5, 13], [7, 11], [8, 9], [8, 11], [8, 13], [8, 16], [9, 10], [11, 12], [13, 14], [15, 16], [15, 19], [16, 17], [16, 20], [18, 19], [19, 20]]
            # para['list_edges'] = [[1, 3], [2, 3], [18, 20], [19, 20]]
            # para['list_edges'] = [[1, 3], [16, 20], [17, 20], [18, 20], [19, 20]] # edges L 2  num_par 4
            para['list_edges'] = [[1, 3], [14, 20], [15, 20], [16, 20], [17, 20], [18, 20], [19, 20]] # edges L 2  num_par 6
            # para['list_edges'] = [[1, 3], [12, 20], [13, 20], [14, 20], [15, 20], [16, 20], [17, 20], [18, 20], [19, 20]] # edges L 2  num_par 8
            # para['list_edges'] = [[1, 3], [10, 20], [11, 20], [12, 20], [13, 20], [14, 20], [15, 20], [16, 20], [17, 20], [18, 20], [19, 20]] # edges L 2  num_par 10
        elif para_init.num_latent == 3:
            para['list_edges'] = [[1, 4], [5, 6], [5, 13], [7, 11], [8, 9], [8, 11], [8, 13], [8, 16], [9, 10], [11, 12], [13, 14], [15, 16], [15, 19], [16, 17], [16, 20], [18, 19], [19, 20]]
            # para['list_evidence_node_temp'] = [11]
            # para['list_search_node_temp'] = [7]
            para['list_evidence_node_temp'] = [7, 8]
            para['list_search_node_temp'] = [11]
        elif para_init.num_latent == 4:
            para['list_edges'] = [[1, 5], [7, 11], [8, 9], [8, 11], [8, 13], [8, 16], [9, 10], [11, 12], [13, 14], [15, 16], [15, 19], [16, 17], [16, 20], [18, 19], [19, 20]]
        elif para_init.num_latent == 5:
            para['list_edges'] = [[1, 6], [7, 11], [8, 9], [8, 11], [8, 13], [8, 16], [9, 10], [11, 12], [13, 14], [15, 16], [15, 19], [16, 17], [16, 20], [18, 19], [19, 20]]
        elif para_init.num_latent == 7:
            para['list_edges'] = [[1, 8], [9, 10], [11, 12], [13, 14], [15, 16], [15, 19], [16, 17], [16, 20], [18, 19], [19, 20]]
        elif para_init.num_latent == 9:
            para['list_edges'] = [[1, 10], [11, 12], [13, 14], [15, 16], [15, 19], [16, 17], [16, 20], [18, 19], [19, 20]]

    elif para_init.bn == 'water':
        if para_init.num_latent == 1:
            para['list_edges'] = [[1, 2], [3, 4], [3, 20], [3, 32], [5, 11], [5, 13], [5, 14], [6, 8], [6, 11], [6, 19], [7, 8], [7, 19], [8, 3], [8, 15], [9, 11], [9, 14], [9, 25], [10, 11], [10, 13], [10, 25], [11, 15], [11, 27], [11, 29], [12, 13], [12, 14], [12, 25], [13, 15], [13, 26], [13, 27], [14, 15], [14, 26], [14, 29], [15, 28], [15, 31], [15, 32], [16, 17], [16, 19], [16, 25], [17, 26], [19, 3], [21, 22], [21, 25], [22, 23], [22, 26], [23, 24], [23, 30], [25, 26], [25, 27], [25, 29], [26, 28], [26, 30], [26, 31], [27, 28], [27, 30], [27, 32], [29, 30], [29, 31], [29, 32]]
        elif para_init.num_latent == 2:
            para['list_edges'] = [[1, 3], [5, 11], [5, 13], [5, 14], [6, 8], [6, 11], [6, 19], [7, 8], [7, 19], [8, 15], [9, 11], [9, 14], [9, 25], [10, 11], [10, 13], [10, 25], [11, 15], [11, 27], [11, 29], [12, 13], [12, 14], [12, 25], [13, 15], [13, 26], [13, 27], [14, 15], [14, 26], [14, 29], [15, 28], [15, 31], [15, 32], [16, 17], [16, 19], [16, 25], [17, 26], [21, 22], [21, 25], [22, 23], [22, 26], [23, 24], [23, 30], [25, 26], [25, 27], [25, 29], [26, 28], [26, 30], [26, 31], [27, 28], [27, 30], [27, 32], [29, 30], [29, 31], [29, 32]]
        elif para_init.num_latent == 3:
            para['list_edges'] = [[1, 4], [5, 11], [5, 13], [5, 14], [6, 8], [6, 11], [6, 19], [7, 8], [7, 19], [8, 15], [9, 11], [9, 14], [9, 25], [10, 11], [10, 13], [10, 25], [11, 15], [11, 27], [11, 29], [12, 13], [12, 14], [12, 25], [13, 15], [13, 26], [13, 27], [14, 15], [14, 26], [14, 29], [15, 28], [15, 31], [15, 32], [16, 17], [16, 19], [16, 25], [17, 26], [21, 22], [21, 25], [22, 23], [22, 26], [23, 24], [23, 30], [25, 26], [25, 27], [25, 29], [26, 28], [26, 30], [26, 31], [27, 28], [27, 30], [27, 32], [29, 30], [29, 31], [29, 32]]
            # para['list_evidence_node_temp'] = [7]
            # para['list_search_node_temp'] = [15]
            para['list_evidence_node_temp'] = [22]
            para['list_search_node_temp'] = [24]
        elif para_init.num_latent == 4:
            para['list_edges'] = [[1, 5], [6, 8], [6, 11], [6, 19], [7, 8], [7, 19], [8, 15], [9, 11], [9, 14], [9, 25], [10, 11], [10, 13], [10, 25], [11, 15], [11, 27], [11, 29], [12, 13], [12, 14], [12, 25], [13, 15], [13, 26], [13, 27], [14, 15], [14, 26], [14, 29], [15, 28], [15, 31], [15, 32], [16, 17], [16, 19], [16, 25], [17, 26], [21, 22], [21, 25], [22, 23], [22, 26], [23, 24], [23, 30], [25, 26], [25, 27], [25, 29], [26, 28], [26, 30], [26, 31], [27, 28], [27, 30], [27, 32], [29, 30], [29, 31], [29, 32]]
        elif para_init.num_latent == 5:
            para['list_edges'] = [[1, 6], [7, 8], [7, 19], [8, 15], [9, 11], [9, 14], [9, 25], [10, 11], [10, 13], [10, 25], [11, 15], [11, 27], [11, 29], [12, 13], [12, 14], [12, 25], [13, 15], [13, 26], [13, 27], [14, 15], [14, 26], [14, 29], [15, 28], [15, 31], [15, 32], [16, 17], [16, 19], [16, 25], [17, 26], [21, 22], [21, 25], [22, 23], [22, 26], [23, 24], [23, 30], [25, 26], [25, 27], [25, 29], [26, 28], [26, 30], [26, 31], [27, 28], [27, 30], [27, 32], [29, 30], [29, 31], [29, 32]]
        elif para_init.num_latent == 7:
            para['list_edges'] = [[1, 8], [9, 11], [9, 14], [9, 25], [10, 11], [10, 13], [10, 25], [11, 15], [11, 27], [11, 29], [12, 13], [12, 14], [12, 25], [13, 15], [13, 26], [13, 27], [14, 15], [14, 26], [14, 29], [15, 28], [15, 31], [15, 32], [16, 17], [16, 19], [16, 25], [17, 26], [21, 22], [21, 25], [22, 23], [22, 26], [23, 24], [23, 30], [25, 26], [25, 27], [25, 29], [26, 28], [26, 30], [26, 31], [27, 28], [27, 30], [27, 32], [29, 30], [29, 31], [29, 32]]

    elif para_init.bn == 'munin1':
        if para_init.num_latent == 1:
            para['list_edges'] = [[1, 2], [3, 4], [3, 73], [3, 74], [3, 75], [3, 76], [3, 77], [3, 78], [3, 79], [3, 80], [3, 81], [3, 84], [3, 85], [4, 120], [5, 180], [5, 183], [6, 136], [7, 9], [8, 9], [9, 152], [10, 12], [11, 12], [12, 134], [13, 23], [14, 16], [15, 16], [16, 58], [17, 19], [18, 19], [19, 56], [20, 22], [21, 22], [22, 23], [23, 129], [24, 26], [25, 26], [26, 138], [27, 29], [28, 29], [29, 54], [30, 32], [31, 32], [32, 52], [33, 35], [34, 35], [35, 50], [36, 38], [37, 38], [38, 48], [39, 40], [39, 41], [39, 42], [39, 44], [39, 47], [39, 51], [39, 53], [39, 55], [39, 57], [39, 59], [39, 60], [39, 61], [39, 64], [39, 65], [39, 66], [40, 169], [41, 96], [42, 43], [43, 63], [44, 67], [45, 47], [45, 49], [45, 51], [45, 53], [45, 55], [46, 47], [46, 49], [46, 51], [46, 53], [46, 55], [46, 57], [46, 59], [46, 60], [46, 61], [46, 64], [46, 65], [46, 66], [47, 48], [48, 121], [49, 50], [50, 124], [51, 52], [52, 128], [53, 54], [54, 133], [55, 56], [56, 151], [57, 58], [58, 166], [59, 185], [60, 94], [61, 62], [62, 63], [63, 102], [64, 107], [65, 113], [66, 67], [67, 175], [68, 92], [68, 95], [68, 104], [68, 108], [68, 119], [68, 126], [68, 131], [68, 149], [68, 164], [68, 168], [68, 177], [69, 119], [69, 122], [69, 126], [69, 131], [69, 149], [70, 71], [71, 83], [72, 86], [73, 123], [74, 127], [75, 132], [76, 109], [77, 93], [78, 150], [79, 165], [80, 178], [81, 82], [82, 83], [83, 98], [84, 105], [85, 86], [86, 171], [87, 89], [87, 116], [88, 89], [88, 116], [89, 91], [90, 91], [90, 117], [90, 118], [91, 92], [91, 95], [91, 104], [91, 108], [92, 93], [93, 94], [94, 97], [94, 101], [94, 106], [95, 96], [95, 100], [96, 97], [97, 98], [98, 99], [100, 101], [101, 102], [102, 103], [104, 105], [104, 107], [105, 106], [106, 111], [107, 115], [108, 109], [108, 113], [109, 110], [110, 111], [110, 114], [111, 112], [113, 114], [114, 115], [116, 117], [116, 118], [118, 119], [118, 122], [118, 126], [118, 131], [118, 149], [118, 164], [118, 168], [118, 177], [119, 120], [120, 121], [121, 139], [122, 123], [123, 124], [124, 125], [126, 127], [127, 128], [128, 129], [129, 130], [131, 132], [132, 133], [133, 134], [134, 135], [134, 148], [134, 154], [135, 136], [136, 137], [136, 143], [136, 144], [136, 145], [136, 146], [136, 147], [136, 153], [137, 138], [138, 139], [139, 140], [139, 141], [139, 142], [149, 150], [150, 151], [151, 152], [152, 153], [152, 167], [153, 154], [153, 156], [153, 159], [153, 162], [153, 163], [153, 181], [154, 155], [156, 157], [156, 158], [159, 160], [159, 161], [164, 165], [165, 166], [166, 167], [166, 170], [166, 174], [166, 179], [168, 169], [168, 173], [169, 170], [170, 171], [171, 172], [173, 174], [174, 175], [175, 176], [177, 178], [177, 185], [178, 179], [179, 180], [179, 181], [181, 182], [181, 183], [181, 184], [185, 186]]
        elif para_init.num_latent == 2:
            para['list_edges'] = [[1, 3], [4, 120], [5, 180], [5, 183], [6, 136], [7, 9], [8, 9], [9, 152], [10, 12], [11, 12], [12, 134], [13, 23], [14, 16], [15, 16], [16, 58], [17, 19], [18, 19], [19, 56], [20, 22], [21, 22], [22, 23], [23, 129], [24, 26], [25, 26], [26, 138], [27, 29], [28, 29], [29, 54], [30, 32], [31, 32], [32, 52], [33, 35], [34, 35], [35, 50], [36, 38], [37, 38], [38, 48], [39, 40], [39, 41], [39, 42], [39, 44], [39, 47], [39, 51], [39, 53], [39, 55], [39, 57], [39, 59], [39, 60], [39, 61], [39, 64], [39, 65], [39, 66], [40, 169], [41, 96], [42, 43], [43, 63], [44, 67], [45, 47], [45, 49], [45, 51], [45, 53], [45, 55], [46, 47], [46, 49], [46, 51], [46, 53], [46, 55], [46, 57], [46, 59], [46, 60], [46, 61], [46, 64], [46, 65], [46, 66], [47, 48], [48, 121], [49, 50], [50, 124], [51, 52], [52, 128], [53, 54], [54, 133], [55, 56], [56, 151], [57, 58], [58, 166], [59, 185], [60, 94], [61, 62], [62, 63], [63, 102], [64, 107], [65, 113], [66, 67], [67, 175], [68, 92], [68, 95], [68, 104], [68, 108], [68, 119], [68, 126], [68, 131], [68, 149], [68, 164], [68, 168], [68, 177], [69, 119], [69, 122], [69, 126], [69, 131], [69, 149], [70, 71], [71, 83], [72, 86], [73, 123], [74, 127], [75, 132], [76, 109], [77, 93], [78, 150], [79, 165], [80, 178], [81, 82], [82, 83], [83, 98], [84, 105], [85, 86], [86, 171], [87, 89], [87, 116], [88, 89], [88, 116], [89, 91], [90, 91], [90, 117], [90, 118], [91, 92], [91, 95], [91, 104], [91, 108], [92, 93], [93, 94], [94, 97], [94, 101], [94, 106], [95, 96], [95, 100], [96, 97], [97, 98], [98, 99], [100, 101], [101, 102], [102, 103], [104, 105], [104, 107], [105, 106], [106, 111], [107, 115], [108, 109], [108, 113], [109, 110], [110, 111], [110, 114], [111, 112], [113, 114], [114, 115], [116, 117], [116, 118], [118, 119], [118, 122], [118, 126], [118, 131], [118, 149], [118, 164], [118, 168], [118, 177], [119, 120], [120, 121], [121, 139], [122, 123], [123, 124], [124, 125], [126, 127], [127, 128], [128, 129], [129, 130], [131, 132], [132, 133], [133, 134], [134, 135], [134, 148], [134, 154], [135, 136], [136, 137], [136, 143], [136, 144], [136, 145], [136, 146], [136, 147], [136, 153], [137, 138], [138, 139], [139, 140], [139, 141], [139, 142], [149, 150], [150, 151], [151, 152], [152, 153], [152, 167], [153, 154], [153, 156], [153, 159], [153, 162], [153, 163], [153, 181], [154, 155], [156, 157], [156, 158], [159, 160], [159, 161], [164, 165], [165, 166], [166, 167], [166, 170], [166, 174], [166, 179], [168, 169], [168, 173], [169, 170], [170, 171], [171, 172], [173, 174], [174, 175], [175, 176], [177, 178], [177, 185], [178, 179], [179, 180], [179, 181], [181, 182], [181, 183], [181, 184], [185, 186]]
        elif para_init.num_latent == 3:
            para['list_edges'] = [[1, 4], [5, 180], [5, 183], [6, 136], [7, 9], [8, 9], [9, 152], [10, 12], [11, 12], [12, 134], [13, 23], [14, 16], [15, 16], [16, 58], [17, 19], [18, 19], [19, 56], [20, 22], [21, 22], [22, 23], [23, 129], [24, 26], [25, 26], [26, 138], [27, 29], [28, 29], [29, 54], [30, 32], [31, 32], [32, 52], [33, 35], [34, 35], [35, 50], [36, 38], [37, 38], [38, 48], [39, 40], [39, 41], [39, 42], [39, 44], [39, 47], [39, 51], [39, 53], [39, 55], [39, 57], [39, 59], [39, 60], [39, 61], [39, 64], [39, 65], [39, 66], [40, 169], [41, 96], [42, 43], [43, 63], [44, 67], [45, 47], [45, 49], [45, 51], [45, 53], [45, 55], [46, 47], [46, 49], [46, 51], [46, 53], [46, 55], [46, 57], [46, 59], [46, 60], [46, 61], [46, 64], [46, 65], [46, 66], [47, 48], [48, 121], [49, 50], [50, 124], [51, 52], [52, 128], [53, 54], [54, 133], [55, 56], [56, 151], [57, 58], [58, 166], [59, 185], [60, 94], [61, 62], [62, 63], [63, 102], [64, 107], [65, 113], [66, 67], [67, 175], [68, 92], [68, 95], [68, 104], [68, 108], [68, 119], [68, 126], [68, 131], [68, 149], [68, 164], [68, 168], [68, 177], [69, 119], [69, 122], [69, 126], [69, 131], [69, 149], [70, 71], [71, 83], [72, 86], [73, 123], [74, 127], [75, 132], [76, 109], [77, 93], [78, 150], [79, 165], [80, 178], [81, 82], [82, 83], [83, 98], [84, 105], [85, 86], [86, 171], [87, 89], [87, 116], [88, 89], [88, 116], [89, 91], [90, 91], [90, 117], [90, 118], [91, 92], [91, 95], [91, 104], [91, 108], [92, 93], [93, 94], [94, 97], [94, 101], [94, 106], [95, 96], [95, 100], [96, 97], [97, 98], [98, 99], [100, 101], [101, 102], [102, 103], [104, 105], [104, 107], [105, 106], [106, 111], [107, 115], [108, 109], [108, 113], [109, 110], [110, 111], [110, 114], [111, 112], [113, 114], [114, 115], [116, 117], [116, 118], [118, 119], [118, 122], [118, 126], [118, 131], [118, 149], [118, 164], [118, 168], [118, 177], [119, 120], [120, 121], [121, 139], [122, 123], [123, 124], [124, 125], [126, 127], [127, 128], [128, 129], [129, 130], [131, 132], [132, 133], [133, 134], [134, 135], [134, 148], [134, 154], [135, 136], [136, 137], [136, 143], [136, 144], [136, 145], [136, 146], [136, 147], [136, 153], [137, 138], [138, 139], [139, 140], [139, 141], [139, 142], [149, 150], [150, 151], [151, 152], [152, 153], [152, 167], [153, 154], [153, 156], [153, 159], [153, 162], [153, 163], [153, 181], [154, 155], [156, 157], [156, 158], [159, 160], [159, 161], [164, 165], [165, 166], [166, 167], [166, 170], [166, 174], [166, 179], [168, 169], [168, 173], [169, 170], [170, 171], [171, 172], [173, 174], [174, 175], [175, 176], [177, 178], [177, 185], [178, 179], [179, 180], [179, 181], [181, 182], [181, 183], [181, 184], [185, 186]]
            # para['list_evidence_node_temp'] = [88]
            # para['list_search_node_temp'] = [102]
            para['list_evidence_node_temp'] = [110]
            para['list_search_node_temp'] = [112]
        elif para_init.num_latent == 4:
            para['list_edges'] = [[1, 5], [6, 136], [7, 9], [8, 9], [9, 152], [10, 12], [11, 12], [12, 134], [13, 23], [14, 16], [15, 16], [16, 58], [17, 19], [18, 19], [19, 56], [20, 22], [21, 22], [22, 23], [23, 129], [24, 26], [25, 26], [26, 138], [27, 29], [28, 29], [29, 54], [30, 32], [31, 32], [32, 52], [33, 35], [34, 35], [35, 50], [36, 38], [37, 38], [38, 48], [39, 40], [39, 41], [39, 42], [39, 44], [39, 47], [39, 51], [39, 53], [39, 55], [39, 57], [39, 59], [39, 60], [39, 61], [39, 64], [39, 65], [39, 66], [40, 169], [41, 96], [42, 43], [43, 63], [44, 67], [45, 47], [45, 49], [45, 51], [45, 53], [45, 55], [46, 47], [46, 49], [46, 51], [46, 53], [46, 55], [46, 57], [46, 59], [46, 60], [46, 61], [46, 64], [46, 65], [46, 66], [47, 48], [48, 121], [49, 50], [50, 124], [51, 52], [52, 128], [53, 54], [54, 133], [55, 56], [56, 151], [57, 58], [58, 166], [59, 185], [60, 94], [61, 62], [62, 63], [63, 102], [64, 107], [65, 113], [66, 67], [67, 175], [68, 92], [68, 95], [68, 104], [68, 108], [68, 119], [68, 126], [68, 131], [68, 149], [68, 164], [68, 168], [68, 177], [69, 119], [69, 122], [69, 126], [69, 131], [69, 149], [70, 71], [71, 83], [72, 86], [73, 123], [74, 127], [75, 132], [76, 109], [77, 93], [78, 150], [79, 165], [80, 178], [81, 82], [82, 83], [83, 98], [84, 105], [85, 86], [86, 171], [87, 89], [87, 116], [88, 89], [88, 116], [89, 91], [90, 91], [90, 117], [90, 118], [91, 92], [91, 95], [91, 104], [91, 108], [92, 93], [93, 94], [94, 97], [94, 101], [94, 106], [95, 96], [95, 100], [96, 97], [97, 98], [98, 99], [100, 101], [101, 102], [102, 103], [104, 105], [104, 107], [105, 106], [106, 111], [107, 115], [108, 109], [108, 113], [109, 110], [110, 111], [110, 114], [111, 112], [113, 114], [114, 115], [116, 117], [116, 118], [118, 119], [118, 122], [118, 126], [118, 131], [118, 149], [118, 164], [118, 168], [118, 177], [119, 120], [120, 121], [121, 139], [122, 123], [123, 124], [124, 125], [126, 127], [127, 128], [128, 129], [129, 130], [131, 132], [132, 133], [133, 134], [134, 135], [134, 148], [134, 154], [135, 136], [136, 137], [136, 143], [136, 144], [136, 145], [136, 146], [136, 147], [136, 153], [137, 138], [138, 139], [139, 140], [139, 141], [139, 142], [149, 150], [150, 151], [151, 152], [152, 153], [152, 167], [153, 154], [153, 156], [153, 159], [153, 162], [153, 163], [153, 181], [154, 155], [156, 157], [156, 158], [159, 160], [159, 161], [164, 165], [165, 166], [166, 167], [166, 170], [166, 174], [166, 179], [168, 169], [168, 173], [169, 170], [170, 171], [171, 172], [173, 174], [174, 175], [175, 176], [177, 178], [177, 185], [178, 179], [179, 180], [179, 181], [181, 182], [181, 183], [181, 184], [185, 186]]
        elif para_init.num_latent == 5:
            para['list_edges'] = [[1, 6], [7, 9], [8, 9], [9, 152], [10, 12], [11, 12], [12, 134], [13, 23], [14, 16], [15, 16], [16, 58], [17, 19], [18, 19], [19, 56], [20, 22], [21, 22], [22, 23], [23, 129], [24, 26], [25, 26], [26, 138], [27, 29], [28, 29], [29, 54], [30, 32], [31, 32], [32, 52], [33, 35], [34, 35], [35, 50], [36, 38], [37, 38], [38, 48], [39, 40], [39, 41], [39, 42], [39, 44], [39, 47], [39, 51], [39, 53], [39, 55], [39, 57], [39, 59], [39, 60], [39, 61], [39, 64], [39, 65], [39, 66], [40, 169], [41, 96], [42, 43], [43, 63], [44, 67], [45, 47], [45, 49], [45, 51], [45, 53], [45, 55], [46, 47], [46, 49], [46, 51], [46, 53], [46, 55], [46, 57], [46, 59], [46, 60], [46, 61], [46, 64], [46, 65], [46, 66], [47, 48], [48, 121], [49, 50], [50, 124], [51, 52], [52, 128], [53, 54], [54, 133], [55, 56], [56, 151], [57, 58], [58, 166], [59, 185], [60, 94], [61, 62], [62, 63], [63, 102], [64, 107], [65, 113], [66, 67], [67, 175], [68, 92], [68, 95], [68, 104], [68, 108], [68, 119], [68, 126], [68, 131], [68, 149], [68, 164], [68, 168], [68, 177], [69, 119], [69, 122], [69, 126], [69, 131], [69, 149], [70, 71], [71, 83], [72, 86], [73, 123], [74, 127], [75, 132], [76, 109], [77, 93], [78, 150], [79, 165], [80, 178], [81, 82], [82, 83], [83, 98], [84, 105], [85, 86], [86, 171], [87, 89], [87, 116], [88, 89], [88, 116], [89, 91], [90, 91], [90, 117], [90, 118], [91, 92], [91, 95], [91, 104], [91, 108], [92, 93], [93, 94], [94, 97], [94, 101], [94, 106], [95, 96], [95, 100], [96, 97], [97, 98], [98, 99], [100, 101], [101, 102], [102, 103], [104, 105], [104, 107], [105, 106], [106, 111], [107, 115], [108, 109], [108, 113], [109, 110], [110, 111], [110, 114], [111, 112], [113, 114], [114, 115], [116, 117], [116, 118], [118, 119], [118, 122], [118, 126], [118, 131], [118, 149], [118, 164], [118, 168], [118, 177], [119, 120], [120, 121], [121, 139], [122, 123], [123, 124], [124, 125], [126, 127], [127, 128], [128, 129], [129, 130], [131, 132], [132, 133], [133, 134], [134, 135], [134, 148], [134, 154], [135, 136], [136, 137], [136, 143], [136, 144], [136, 145], [136, 146], [136, 147], [136, 153], [137, 138], [138, 139], [139, 140], [139, 141], [139, 142], [149, 150], [150, 151], [151, 152], [152, 153], [152, 167], [153, 154], [153, 156], [153, 159], [153, 162], [153, 163], [153, 181], [154, 155], [156, 157], [156, 158], [159, 160], [159, 161], [164, 165], [165, 166], [166, 167], [166, 170], [166, 174], [166, 179], [168, 169], [168, 173], [169, 170], [170, 171], [171, 172], [173, 174], [174, 175], [175, 176], [177, 178], [177, 185], [178, 179], [179, 180], [179, 181], [181, 182], [181, 183], [181, 184], [185, 186]]
        elif para_init.num_latent == 7:
            para['list_edges'] = [[1, 8], [9, 152], [10, 12], [11, 12], [12, 134], [13, 23], [14, 16], [15, 16], [16, 58], [17, 19], [18, 19], [19, 56], [20, 22], [21, 22], [22, 23], [23, 129], [24, 26], [25, 26], [26, 138], [27, 29], [28, 29], [29, 54], [30, 32], [31, 32], [32, 52], [33, 35], [34, 35], [35, 50], [36, 38], [37, 38], [38, 48], [39, 40], [39, 41], [39, 42], [39, 44], [39, 47], [39, 51], [39, 53], [39, 55], [39, 57], [39, 59], [39, 60], [39, 61], [39, 64], [39, 65], [39, 66], [40, 169], [41, 96], [42, 43], [43, 63], [44, 67], [45, 47], [45, 49], [45, 51], [45, 53], [45, 55], [46, 47], [46, 49], [46, 51], [46, 53], [46, 55], [46, 57], [46, 59], [46, 60], [46, 61], [46, 64], [46, 65], [46, 66], [47, 48], [48, 121], [49, 50], [50, 124], [51, 52], [52, 128], [53, 54], [54, 133], [55, 56], [56, 151], [57, 58], [58, 166], [59, 185], [60, 94], [61, 62], [62, 63], [63, 102], [64, 107], [65, 113], [66, 67], [67, 175], [68, 92], [68, 95], [68, 104], [68, 108], [68, 119], [68, 126], [68, 131], [68, 149], [68, 164], [68, 168], [68, 177], [69, 119], [69, 122], [69, 126], [69, 131], [69, 149], [70, 71], [71, 83], [72, 86], [73, 123], [74, 127], [75, 132], [76, 109], [77, 93], [78, 150], [79, 165], [80, 178], [81, 82], [82, 83], [83, 98], [84, 105], [85, 86], [86, 171], [87, 89], [87, 116], [88, 89], [88, 116], [89, 91], [90, 91], [90, 117], [90, 118], [91, 92], [91, 95], [91, 104], [91, 108], [92, 93], [93, 94], [94, 97], [94, 101], [94, 106], [95, 96], [95, 100], [96, 97], [97, 98], [98, 99], [100, 101], [101, 102], [102, 103], [104, 105], [104, 107], [105, 106], [106, 111], [107, 115], [108, 109], [108, 113], [109, 110], [110, 111], [110, 114], [111, 112], [113, 114], [114, 115], [116, 117], [116, 118], [118, 119], [118, 122], [118, 126], [118, 131], [118, 149], [118, 164], [118, 168], [118, 177], [119, 120], [120, 121], [121, 139], [122, 123], [123, 124], [124, 125], [126, 127], [127, 128], [128, 129], [129, 130], [131, 132], [132, 133], [133, 134], [134, 135], [134, 148], [134, 154], [135, 136], [136, 137], [136, 143], [136, 144], [136, 145], [136, 146], [136, 147], [136, 153], [137, 138], [138, 139], [139, 140], [139, 141], [139, 142], [149, 150], [150, 151], [151, 152], [152, 153], [152, 167], [153, 154], [153, 156], [153, 159], [153, 162], [153, 163], [153, 181], [154, 155], [156, 157], [156, 158], [159, 160], [159, 161], [164, 165], [165, 166], [166, 167], [166, 170], [166, 174], [166, 179], [168, 169], [168, 173], [169, 170], [170, 171], [171, 172], [173, 174], [174, 175], [175, 176], [177, 178], [177, 185], [178, 179], [179, 180], [179, 181], [181, 182], [181, 183], [181, 184], [185, 186]]


    elif para_init.bn == 'pigs':
        if para_init.num_latent == 1:
            para['list_edges'] = [[1, 2], [3, 4], [4, 317], [5, 31], [5, 32], [6, 289], [7, 419], [8, 414], [8, 417], [9, 288], [10, 252], [10, 253], [10, 256], [11, 435], [11, 437], [12, 434], [13, 30], [14, 28], [14, 29], [14, 402], [14, 403], [15, 17], [16, 17], [16, 240], [17, 242], [18, 236], [18, 240], [19, 235], [20, 283], [20, 285], [21, 279], [22, 207], [23, 203], [24, 127], [25, 127], [26, 103], [26, 156], [27, 28], [27, 29], [27, 31], [27, 32], [27, 103], [27, 156], [27, 317], [28, 306], [28, 307], [29, 30], [29, 242], [30, 254], [32, 308], [33, 35], [34, 35], [35, 382], [36, 40], [37, 39], [37, 40], [38, 39], [39, 167], [40, 377], [40, 379], [41, 48], [42, 45], [43, 45], [44, 46], [44, 47], [45, 46], [45, 47], [45, 48], [48, 378], [49, 51], [50, 51], [51, 380], [51, 381], [52, 104], [53, 55], [54, 55], [55, 65], [56, 58], [57, 58], [58, 65], [59, 61], [59, 62], [60, 61], [60, 62], [61, 422], [62, 67], [62, 68], [63, 66], [64, 375], [65, 66], [65, 67], [65, 68], [65, 105], [65, 106], [66, 376], [69, 119], [70, 118], [71, 369], [71, 372], [72, 74], [73, 74], [74, 114], [74, 116], [75, 77], [76, 77], [77, 109], [77, 111], [77, 112], [77, 113], [78, 84], [79, 83], [80, 303], [80, 304], [81, 85], [82, 83], [82, 84], [82, 85], [83, 302], [84, 110], [85, 163], [86, 160], [86, 162], [87, 367], [87, 393], [87, 395], [88, 90], [88, 91], [88, 97], [88, 150], [89, 90], [89, 91], [89, 97], [89, 150], [90, 368], [91, 161], [92, 96], [92, 440], [93, 95], [94, 95], [94, 96], [96, 100], [97, 99], [97, 101], [97, 102], [98, 99], [98, 100], [98, 101], [98, 102], [102, 126], [103, 104], [103, 108], [103, 115], [103, 117], [103, 120], [103, 124], [103, 305], [104, 105], [104, 106], [107, 108], [107, 115], [107, 117], [107, 118], [107, 119], [107, 120], [107, 124], [108, 109], [108, 111], [108, 112], [108, 113], [109, 110], [113, 114], [115, 116], [118, 373], [118, 374], [120, 122], [120, 123], [121, 122], [121, 123], [121, 125], [124, 125], [124, 159], [125, 126], [127, 158], [127, 194], [127, 365], [128, 130], [128, 131], [129, 130], [129, 131], [131, 366], [132, 134], [133, 134], [134, 363], [135, 362], [136, 138], [137, 138], [138, 148], [138, 359], [138, 361], [139, 147], [140, 143], [141, 143], [141, 147], [142, 144], [143, 144], [143, 277], [144, 412], [145, 276], [146, 149], [147, 148], [147, 149], [149, 223], [149, 224], [150, 396], [150, 397], [150, 398], [151, 153], [151, 154], [152, 153], [152, 154], [153, 165], [154, 164], [154, 166], [155, 157], [156, 157], [156, 158], [156, 160], [156, 162], [156, 167], [156, 171], [156, 194], [158, 159], [160, 161], [162, 163], [163, 164], [163, 165], [163, 166], [168, 170], [169, 170], [170, 171], [171, 358], [172, 275], [173, 355], [174, 233], [175, 177], [175, 232], [176, 177], [177, 179], [178, 179], [180, 349], [181, 183], [181, 184], [181, 273], [181, 287], [182, 183], [182, 184], [183, 406], [183, 407], [184, 300], [184, 301], [185, 237], [186, 345], [186, 347], [186, 385], [187, 189], [188, 189], [189, 339], [189, 340], [189, 342], [189, 343], [190, 192], [191, 192], [192, 195], [192, 196], [192, 197], [192, 198], [192, 199], [192, 200], [193, 336], [194, 195], [194, 196], [194, 197], [194, 198], [194, 199], [194, 200], [194, 234], [194, 337], [194, 338], [194, 346], [194, 348], [194, 386], [194, 387], [194, 388], [201, 204], [202, 203], [202, 204], [202, 207], [203, 391], [204, 206], [204, 335], [205, 206], [206, 299], [207, 221], [207, 222], [207, 225], [208, 210], [209, 210], [210, 219], [210, 220], [211, 217], [211, 218], [212, 214], [213, 214], [214, 216], [215, 216], [215, 217], [215, 218], [215, 219], [215, 220], [215, 221], [215, 222], [215, 223], [215, 224], [215, 225], [215, 272], [215, 280], [215, 281], [215, 282], [215, 284], [226, 271], [227, 231], [228, 230], [229, 230], [229, 231], [229, 232], [229, 235], [229, 236], [232, 233], [232, 341], [232, 352], [233, 234], [235, 269], [235, 270], [235, 286], [236, 237], [236, 265], [236, 278], [237, 274], [238, 267], [238, 268], [239, 266], [240, 297], [240, 333], [241, 334], [242, 332], [242, 370], [242, 371], [243, 245], [244, 245], [245, 329], [246, 248], [247, 248], [248, 330], [248, 331], [249, 255], [250, 258], [251, 252], [251, 253], [251, 256], [251, 258], [252, 404], [253, 254], [254, 255], [256, 405], [257, 260], [258, 260], [259, 326], [260, 327], [260, 328], [261, 264], [262, 290], [263, 264], [263, 265], [263, 269], [263, 270], [263, 271], [263, 273], [263, 275], [263, 276], [263, 278], [263, 279], [263, 283], [263, 285], [263, 286], [263, 287], [263, 288], [263, 289], [263, 290], [263, 297], [264, 410], [265, 266], [265, 267], [265, 268], [270, 411], [271, 272], [273, 274], [273, 350], [275, 356], [275, 357], [276, 277], [278, 360], [279, 280], [279, 281], [279, 282], [283, 284], [285, 394], [286, 401], [287, 408], [288, 409], [288, 413], [289, 415], [289, 416], [289, 418], [289, 420], [290, 295], [291, 293], [291, 294], [292, 293], [292, 294], [292, 295], [296, 298], [297, 298], [297, 299], [297, 300], [297, 301], [297, 302], [297, 305], [297, 306], [297, 307], [297, 308], [299, 389], [302, 303], [302, 304], [305, 383], [305, 384], [309, 324], [310, 321], [311, 322], [311, 323], [311, 325], [312, 318], [313, 315], [314, 315], [315, 319], [315, 320], [316, 426], [317, 318], [317, 321], [317, 324], [317, 326], [317, 329], [317, 333], [317, 335], [317, 336], [317, 339], [317, 340], [317, 342], [317, 343], [317, 345], [317, 347], [317, 349], [317, 355], [317, 359], [317, 361], [317, 362], [317, 365], [317, 367], [317, 369], [317, 372], [317, 375], [317, 377], [317, 379], [317, 385], [317, 391], [317, 393], [317, 395], [317, 402], [317, 403], [317, 404], [317, 405], [317, 414], [317, 417], [317, 419], [317, 421], [317, 426], [318, 319], [318, 320], [321, 322], [321, 323], [324, 325], [326, 327], [326, 328], [329, 330], [329, 331], [329, 332], [333, 334], [335, 390], [336, 337], [336, 338], [340, 341], [341, 344], [343, 344], [343, 353], [343, 354], [345, 346], [347, 348], [348, 351], [349, 350], [349, 352], [350, 351], [352, 353], [352, 354], [355, 356], [355, 357], [357, 358], [359, 360], [361, 364], [362, 363], [363, 364], [363, 399], [363, 400], [365, 366], [367, 368], [369, 370], [369, 371], [372, 373], [372, 374], [375, 376], [377, 378], [379, 380], [379, 381], [379, 382], [382, 383], [382, 384], [385, 386], [385, 387], [385, 388], [388, 389], [388, 390], [388, 392], [391, 392], [393, 394], [395, 396], [395, 397], [395, 398], [395, 401], [398, 399], [398, 400], [404, 438], [405, 406], [405, 407], [405, 408], [408, 409], [408, 410], [408, 411], [408, 412], [408, 413], [414, 415], [414, 416], [417, 418], [419, 420], [421, 422], [423, 425], [424, 425], [425, 427], [425, 428], [426, 427], [426, 428], [429, 433], [430, 432], [431, 432], [431, 433], [431, 434], [431, 436], [431, 440], [434, 435], [436, 437], [437, 438], [439, 441], [440, 441]]
        elif para_init.num_latent == 2:
            para['list_edges'] = [[1, 3], [4, 317], [5, 31], [5, 32], [6, 289], [7, 419], [8, 414], [8, 417], [9, 288], [10, 252], [10, 253], [10, 256], [11, 435], [11, 437], [12, 434], [13, 30], [14, 28], [14, 29], [14, 402], [14, 403], [15, 17], [16, 17], [16, 240], [17, 242], [18, 236], [18, 240], [19, 235], [20, 283], [20, 285], [21, 279], [22, 207], [23, 203], [24, 127], [25, 127], [26, 103], [26, 156], [27, 28], [27, 29], [27, 31], [27, 32], [27, 103], [27, 156], [27, 317], [28, 306], [28, 307], [29, 30], [29, 242], [30, 254], [32, 308], [33, 35], [34, 35], [35, 382], [36, 40], [37, 39], [37, 40], [38, 39], [39, 167], [40, 377], [40, 379], [41, 48], [42, 45], [43, 45], [44, 46], [44, 47], [45, 46], [45, 47], [45, 48], [48, 378], [49, 51], [50, 51], [51, 380], [51, 381], [52, 104], [53, 55], [54, 55], [55, 65], [56, 58], [57, 58], [58, 65], [59, 61], [59, 62], [60, 61], [60, 62], [61, 422], [62, 67], [62, 68], [63, 66], [64, 375], [65, 66], [65, 67], [65, 68], [65, 105], [65, 106], [66, 376], [69, 119], [70, 118], [71, 369], [71, 372], [72, 74], [73, 74], [74, 114], [74, 116], [75, 77], [76, 77], [77, 109], [77, 111], [77, 112], [77, 113], [78, 84], [79, 83], [80, 303], [80, 304], [81, 85], [82, 83], [82, 84], [82, 85], [83, 302], [84, 110], [85, 163], [86, 160], [86, 162], [87, 367], [87, 393], [87, 395], [88, 90], [88, 91], [88, 97], [88, 150], [89, 90], [89, 91], [89, 97], [89, 150], [90, 368], [91, 161], [92, 96], [92, 440], [93, 95], [94, 95], [94, 96], [96, 100], [97, 99], [97, 101], [97, 102], [98, 99], [98, 100], [98, 101], [98, 102], [102, 126], [103, 104], [103, 108], [103, 115], [103, 117], [103, 120], [103, 124], [103, 305], [104, 105], [104, 106], [107, 108], [107, 115], [107, 117], [107, 118], [107, 119], [107, 120], [107, 124], [108, 109], [108, 111], [108, 112], [108, 113], [109, 110], [113, 114], [115, 116], [118, 373], [118, 374], [120, 122], [120, 123], [121, 122], [121, 123], [121, 125], [124, 125], [124, 159], [125, 126], [127, 158], [127, 194], [127, 365], [128, 130], [128, 131], [129, 130], [129, 131], [131, 366], [132, 134], [133, 134], [134, 363], [135, 362], [136, 138], [137, 138], [138, 148], [138, 359], [138, 361], [139, 147], [140, 143], [141, 143], [141, 147], [142, 144], [143, 144], [143, 277], [144, 412], [145, 276], [146, 149], [147, 148], [147, 149], [149, 223], [149, 224], [150, 396], [150, 397], [150, 398], [151, 153], [151, 154], [152, 153], [152, 154], [153, 165], [154, 164], [154, 166], [155, 157], [156, 157], [156, 158], [156, 160], [156, 162], [156, 167], [156, 171], [156, 194], [158, 159], [160, 161], [162, 163], [163, 164], [163, 165], [163, 166], [168, 170], [169, 170], [170, 171], [171, 358], [172, 275], [173, 355], [174, 233], [175, 177], [175, 232], [176, 177], [177, 179], [178, 179], [180, 349], [181, 183], [181, 184], [181, 273], [181, 287], [182, 183], [182, 184], [183, 406], [183, 407], [184, 300], [184, 301], [185, 237], [186, 345], [186, 347], [186, 385], [187, 189], [188, 189], [189, 339], [189, 340], [189, 342], [189, 343], [190, 192], [191, 192], [192, 195], [192, 196], [192, 197], [192, 198], [192, 199], [192, 200], [193, 336], [194, 195], [194, 196], [194, 197], [194, 198], [194, 199], [194, 200], [194, 234], [194, 337], [194, 338], [194, 346], [194, 348], [194, 386], [194, 387], [194, 388], [201, 204], [202, 203], [202, 204], [202, 207], [203, 391], [204, 206], [204, 335], [205, 206], [206, 299], [207, 221], [207, 222], [207, 225], [208, 210], [209, 210], [210, 219], [210, 220], [211, 217], [211, 218], [212, 214], [213, 214], [214, 216], [215, 216], [215, 217], [215, 218], [215, 219], [215, 220], [215, 221], [215, 222], [215, 223], [215, 224], [215, 225], [215, 272], [215, 280], [215, 281], [215, 282], [215, 284], [226, 271], [227, 231], [228, 230], [229, 230], [229, 231], [229, 232], [229, 235], [229, 236], [232, 233], [232, 341], [232, 352], [233, 234], [235, 269], [235, 270], [235, 286], [236, 237], [236, 265], [236, 278], [237, 274], [238, 267], [238, 268], [239, 266], [240, 297], [240, 333], [241, 334], [242, 332], [242, 370], [242, 371], [243, 245], [244, 245], [245, 329], [246, 248], [247, 248], [248, 330], [248, 331], [249, 255], [250, 258], [251, 252], [251, 253], [251, 256], [251, 258], [252, 404], [253, 254], [254, 255], [256, 405], [257, 260], [258, 260], [259, 326], [260, 327], [260, 328], [261, 264], [262, 290], [263, 264], [263, 265], [263, 269], [263, 270], [263, 271], [263, 273], [263, 275], [263, 276], [263, 278], [263, 279], [263, 283], [263, 285], [263, 286], [263, 287], [263, 288], [263, 289], [263, 290], [263, 297], [264, 410], [265, 266], [265, 267], [265, 268], [270, 411], [271, 272], [273, 274], [273, 350], [275, 356], [275, 357], [276, 277], [278, 360], [279, 280], [279, 281], [279, 282], [283, 284], [285, 394], [286, 401], [287, 408], [288, 409], [288, 413], [289, 415], [289, 416], [289, 418], [289, 420], [290, 295], [291, 293], [291, 294], [292, 293], [292, 294], [292, 295], [296, 298], [297, 298], [297, 299], [297, 300], [297, 301], [297, 302], [297, 305], [297, 306], [297, 307], [297, 308], [299, 389], [302, 303], [302, 304], [305, 383], [305, 384], [309, 324], [310, 321], [311, 322], [311, 323], [311, 325], [312, 318], [313, 315], [314, 315], [315, 319], [315, 320], [316, 426], [317, 318], [317, 321], [317, 324], [317, 326], [317, 329], [317, 333], [317, 335], [317, 336], [317, 339], [317, 340], [317, 342], [317, 343], [317, 345], [317, 347], [317, 349], [317, 355], [317, 359], [317, 361], [317, 362], [317, 365], [317, 367], [317, 369], [317, 372], [317, 375], [317, 377], [317, 379], [317, 385], [317, 391], [317, 393], [317, 395], [317, 402], [317, 403], [317, 404], [317, 405], [317, 414], [317, 417], [317, 419], [317, 421], [317, 426], [318, 319], [318, 320], [321, 322], [321, 323], [324, 325], [326, 327], [326, 328], [329, 330], [329, 331], [329, 332], [333, 334], [335, 390], [336, 337], [336, 338], [340, 341], [341, 344], [343, 344], [343, 353], [343, 354], [345, 346], [347, 348], [348, 351], [349, 350], [349, 352], [350, 351], [352, 353], [352, 354], [355, 356], [355, 357], [357, 358], [359, 360], [361, 364], [362, 363], [363, 364], [363, 399], [363, 400], [365, 366], [367, 368], [369, 370], [369, 371], [372, 373], [372, 374], [375, 376], [377, 378], [379, 380], [379, 381], [379, 382], [382, 383], [382, 384], [385, 386], [385, 387], [385, 388], [388, 389], [388, 390], [388, 392], [391, 392], [393, 394], [395, 396], [395, 397], [395, 398], [395, 401], [398, 399], [398, 400], [404, 438], [405, 406], [405, 407], [405, 408], [408, 409], [408, 410], [408, 411], [408, 412], [408, 413], [414, 415], [414, 416], [417, 418], [419, 420], [421, 422], [423, 425], [424, 425], [425, 427], [425, 428], [426, 427], [426, 428], [429, 433], [430, 432], [431, 432], [431, 433], [431, 434], [431, 436], [431, 440], [434, 435], [436, 437], [437, 438], [439, 441], [440, 441]]
        elif para_init.num_latent == 3:
            para['list_edges'] = [[1, 4], [5, 31], [5, 32], [6, 289], [7, 419], [8, 414], [8, 417], [9, 288], [10, 252], [10, 253], [10, 256], [11, 435], [11, 437], [12, 434], [13, 30], [14, 28], [14, 29], [14, 402], [14, 403], [15, 17], [16, 17], [16, 240], [17, 242], [18, 236], [18, 240], [19, 235], [20, 283], [20, 285], [21, 279], [22, 207], [23, 203], [24, 127], [25, 127], [26, 103], [26, 156], [27, 28], [27, 29], [27, 31], [27, 32], [27, 103], [27, 156], [27, 317], [28, 306], [28, 307], [29, 30], [29, 242], [30, 254], [32, 308], [33, 35], [34, 35], [35, 382], [36, 40], [37, 39], [37, 40], [38, 39], [39, 167], [40, 377], [40, 379], [41, 48], [42, 45], [43, 45], [44, 46], [44, 47], [45, 46], [45, 47], [45, 48], [48, 378], [49, 51], [50, 51], [51, 380], [51, 381], [52, 104], [53, 55], [54, 55], [55, 65], [56, 58], [57, 58], [58, 65], [59, 61], [59, 62], [60, 61], [60, 62], [61, 422], [62, 67], [62, 68], [63, 66], [64, 375], [65, 66], [65, 67], [65, 68], [65, 105], [65, 106], [66, 376], [69, 119], [70, 118], [71, 369], [71, 372], [72, 74], [73, 74], [74, 114], [74, 116], [75, 77], [76, 77], [77, 109], [77, 111], [77, 112], [77, 113], [78, 84], [79, 83], [80, 303], [80, 304], [81, 85], [82, 83], [82, 84], [82, 85], [83, 302], [84, 110], [85, 163], [86, 160], [86, 162], [87, 367], [87, 393], [87, 395], [88, 90], [88, 91], [88, 97], [88, 150], [89, 90], [89, 91], [89, 97], [89, 150], [90, 368], [91, 161], [92, 96], [92, 440], [93, 95], [94, 95], [94, 96], [96, 100], [97, 99], [97, 101], [97, 102], [98, 99], [98, 100], [98, 101], [98, 102], [102, 126], [103, 104], [103, 108], [103, 115], [103, 117], [103, 120], [103, 124], [103, 305], [104, 105], [104, 106], [107, 108], [107, 115], [107, 117], [107, 118], [107, 119], [107, 120], [107, 124], [108, 109], [108, 111], [108, 112], [108, 113], [109, 110], [113, 114], [115, 116], [118, 373], [118, 374], [120, 122], [120, 123], [121, 122], [121, 123], [121, 125], [124, 125], [124, 159], [125, 126], [127, 158], [127, 194], [127, 365], [128, 130], [128, 131], [129, 130], [129, 131], [131, 366], [132, 134], [133, 134], [134, 363], [135, 362], [136, 138], [137, 138], [138, 148], [138, 359], [138, 361], [139, 147], [140, 143], [141, 143], [141, 147], [142, 144], [143, 144], [143, 277], [144, 412], [145, 276], [146, 149], [147, 148], [147, 149], [149, 223], [149, 224], [150, 396], [150, 397], [150, 398], [151, 153], [151, 154], [152, 153], [152, 154], [153, 165], [154, 164], [154, 166], [155, 157], [156, 157], [156, 158], [156, 160], [156, 162], [156, 167], [156, 171], [156, 194], [158, 159], [160, 161], [162, 163], [163, 164], [163, 165], [163, 166], [168, 170], [169, 170], [170, 171], [171, 358], [172, 275], [173, 355], [174, 233], [175, 177], [175, 232], [176, 177], [177, 179], [178, 179], [180, 349], [181, 183], [181, 184], [181, 273], [181, 287], [182, 183], [182, 184], [183, 406], [183, 407], [184, 300], [184, 301], [185, 237], [186, 345], [186, 347], [186, 385], [187, 189], [188, 189], [189, 339], [189, 340], [189, 342], [189, 343], [190, 192], [191, 192], [192, 195], [192, 196], [192, 197], [192, 198], [192, 199], [192, 200], [193, 336], [194, 195], [194, 196], [194, 197], [194, 198], [194, 199], [194, 200], [194, 234], [194, 337], [194, 338], [194, 346], [194, 348], [194, 386], [194, 387], [194, 388], [201, 204], [202, 203], [202, 204], [202, 207], [203, 391], [204, 206], [204, 335], [205, 206], [206, 299], [207, 221], [207, 222], [207, 225], [208, 210], [209, 210], [210, 219], [210, 220], [211, 217], [211, 218], [212, 214], [213, 214], [214, 216], [215, 216], [215, 217], [215, 218], [215, 219], [215, 220], [215, 221], [215, 222], [215, 223], [215, 224], [215, 225], [215, 272], [215, 280], [215, 281], [215, 282], [215, 284], [226, 271], [227, 231], [228, 230], [229, 230], [229, 231], [229, 232], [229, 235], [229, 236], [232, 233], [232, 341], [232, 352], [233, 234], [235, 269], [235, 270], [235, 286], [236, 237], [236, 265], [236, 278], [237, 274], [238, 267], [238, 268], [239, 266], [240, 297], [240, 333], [241, 334], [242, 332], [242, 370], [242, 371], [243, 245], [244, 245], [245, 329], [246, 248], [247, 248], [248, 330], [248, 331], [249, 255], [250, 258], [251, 252], [251, 253], [251, 256], [251, 258], [252, 404], [253, 254], [254, 255], [256, 405], [257, 260], [258, 260], [259, 326], [260, 327], [260, 328], [261, 264], [262, 290], [263, 264], [263, 265], [263, 269], [263, 270], [263, 271], [263, 273], [263, 275], [263, 276], [263, 278], [263, 279], [263, 283], [263, 285], [263, 286], [263, 287], [263, 288], [263, 289], [263, 290], [263, 297], [264, 410], [265, 266], [265, 267], [265, 268], [270, 411], [271, 272], [273, 274], [273, 350], [275, 356], [275, 357], [276, 277], [278, 360], [279, 280], [279, 281], [279, 282], [283, 284], [285, 394], [286, 401], [287, 408], [288, 409], [288, 413], [289, 415], [289, 416], [289, 418], [289, 420], [290, 295], [291, 293], [291, 294], [292, 293], [292, 294], [292, 295], [296, 298], [297, 298], [297, 299], [297, 300], [297, 301], [297, 302], [297, 305], [297, 306], [297, 307], [297, 308], [299, 389], [302, 303], [302, 304], [305, 383], [305, 384], [309, 324], [310, 321], [311, 322], [311, 323], [311, 325], [312, 318], [313, 315], [314, 315], [315, 319], [315, 320], [316, 426], [317, 318], [317, 321], [317, 324], [317, 326], [317, 329], [317, 333], [317, 335], [317, 336], [317, 339], [317, 340], [317, 342], [317, 343], [317, 345], [317, 347], [317, 349], [317, 355], [317, 359], [317, 361], [317, 362], [317, 365], [317, 367], [317, 369], [317, 372], [317, 375], [317, 377], [317, 379], [317, 385], [317, 391], [317, 393], [317, 395], [317, 402], [317, 403], [317, 404], [317, 405], [317, 414], [317, 417], [317, 419], [317, 421], [317, 426], [318, 319], [318, 320], [321, 322], [321, 323], [324, 325], [326, 327], [326, 328], [329, 330], [329, 331], [329, 332], [333, 334], [335, 390], [336, 337], [336, 338], [340, 341], [341, 344], [343, 344], [343, 353], [343, 354], [345, 346], [347, 348], [348, 351], [349, 350], [349, 352], [350, 351], [352, 353], [352, 354], [355, 356], [355, 357], [357, 358], [359, 360], [361, 364], [362, 363], [363, 364], [363, 399], [363, 400], [365, 366], [367, 368], [369, 370], [369, 371], [372, 373], [372, 374], [375, 376], [377, 378], [379, 380], [379, 381], [379, 382], [382, 383], [382, 384], [385, 386], [385, 387], [385, 388], [388, 389], [388, 390], [388, 392], [391, 392], [393, 394], [395, 396], [395, 397], [395, 398], [395, 401], [398, 399], [398, 400], [404, 438], [405, 406], [405, 407], [405, 408], [408, 409], [408, 410], [408, 411], [408, 412], [408, 413], [414, 415], [414, 416], [417, 418], [419, 420], [421, 422], [423, 425], [424, 425], [425, 427], [425, 428], [426, 427], [426, 428], [429, 433], [430, 432], [431, 432], [431, 433], [431, 434], [431, 436], [431, 440], [434, 435], [436, 437], [437, 438], [439, 441], [440, 441]]
            # para['list_evidence_node_temp'] = [250]
            # para['list_search_node_temp'] = [327]
            para['list_evidence_node_temp'] = [43, 44]
            para['list_search_node_temp'] = [46]
        elif para_init.num_latent == 4:
            para['list_edges'] = [[1, 5], [6, 289], [7, 419], [8, 414], [8, 417], [9, 288], [10, 252], [10, 253], [10, 256], [11, 435], [11, 437], [12, 434], [13, 30], [14, 28], [14, 29], [14, 402], [14, 403], [15, 17], [16, 17], [16, 240], [17, 242], [18, 236], [18, 240], [19, 235], [20, 283], [20, 285], [21, 279], [22, 207], [23, 203], [24, 127], [25, 127], [26, 103], [26, 156], [27, 28], [27, 29], [27, 31], [27, 32], [27, 103], [27, 156], [27, 317], [28, 306], [28, 307], [29, 30], [29, 242], [30, 254], [32, 308], [33, 35], [34, 35], [35, 382], [36, 40], [37, 39], [37, 40], [38, 39], [39, 167], [40, 377], [40, 379], [41, 48], [42, 45], [43, 45], [44, 46], [44, 47], [45, 46], [45, 47], [45, 48], [48, 378], [49, 51], [50, 51], [51, 380], [51, 381], [52, 104], [53, 55], [54, 55], [55, 65], [56, 58], [57, 58], [58, 65], [59, 61], [59, 62], [60, 61], [60, 62], [61, 422], [62, 67], [62, 68], [63, 66], [64, 375], [65, 66], [65, 67], [65, 68], [65, 105], [65, 106], [66, 376], [69, 119], [70, 118], [71, 369], [71, 372], [72, 74], [73, 74], [74, 114], [74, 116], [75, 77], [76, 77], [77, 109], [77, 111], [77, 112], [77, 113], [78, 84], [79, 83], [80, 303], [80, 304], [81, 85], [82, 83], [82, 84], [82, 85], [83, 302], [84, 110], [85, 163], [86, 160], [86, 162], [87, 367], [87, 393], [87, 395], [88, 90], [88, 91], [88, 97], [88, 150], [89, 90], [89, 91], [89, 97], [89, 150], [90, 368], [91, 161], [92, 96], [92, 440], [93, 95], [94, 95], [94, 96], [96, 100], [97, 99], [97, 101], [97, 102], [98, 99], [98, 100], [98, 101], [98, 102], [102, 126], [103, 104], [103, 108], [103, 115], [103, 117], [103, 120], [103, 124], [103, 305], [104, 105], [104, 106], [107, 108], [107, 115], [107, 117], [107, 118], [107, 119], [107, 120], [107, 124], [108, 109], [108, 111], [108, 112], [108, 113], [109, 110], [113, 114], [115, 116], [118, 373], [118, 374], [120, 122], [120, 123], [121, 122], [121, 123], [121, 125], [124, 125], [124, 159], [125, 126], [127, 158], [127, 194], [127, 365], [128, 130], [128, 131], [129, 130], [129, 131], [131, 366], [132, 134], [133, 134], [134, 363], [135, 362], [136, 138], [137, 138], [138, 148], [138, 359], [138, 361], [139, 147], [140, 143], [141, 143], [141, 147], [142, 144], [143, 144], [143, 277], [144, 412], [145, 276], [146, 149], [147, 148], [147, 149], [149, 223], [149, 224], [150, 396], [150, 397], [150, 398], [151, 153], [151, 154], [152, 153], [152, 154], [153, 165], [154, 164], [154, 166], [155, 157], [156, 157], [156, 158], [156, 160], [156, 162], [156, 167], [156, 171], [156, 194], [158, 159], [160, 161], [162, 163], [163, 164], [163, 165], [163, 166], [168, 170], [169, 170], [170, 171], [171, 358], [172, 275], [173, 355], [174, 233], [175, 177], [175, 232], [176, 177], [177, 179], [178, 179], [180, 349], [181, 183], [181, 184], [181, 273], [181, 287], [182, 183], [182, 184], [183, 406], [183, 407], [184, 300], [184, 301], [185, 237], [186, 345], [186, 347], [186, 385], [187, 189], [188, 189], [189, 339], [189, 340], [189, 342], [189, 343], [190, 192], [191, 192], [192, 195], [192, 196], [192, 197], [192, 198], [192, 199], [192, 200], [193, 336], [194, 195], [194, 196], [194, 197], [194, 198], [194, 199], [194, 200], [194, 234], [194, 337], [194, 338], [194, 346], [194, 348], [194, 386], [194, 387], [194, 388], [201, 204], [202, 203], [202, 204], [202, 207], [203, 391], [204, 206], [204, 335], [205, 206], [206, 299], [207, 221], [207, 222], [207, 225], [208, 210], [209, 210], [210, 219], [210, 220], [211, 217], [211, 218], [212, 214], [213, 214], [214, 216], [215, 216], [215, 217], [215, 218], [215, 219], [215, 220], [215, 221], [215, 222], [215, 223], [215, 224], [215, 225], [215, 272], [215, 280], [215, 281], [215, 282], [215, 284], [226, 271], [227, 231], [228, 230], [229, 230], [229, 231], [229, 232], [229, 235], [229, 236], [232, 233], [232, 341], [232, 352], [233, 234], [235, 269], [235, 270], [235, 286], [236, 237], [236, 265], [236, 278], [237, 274], [238, 267], [238, 268], [239, 266], [240, 297], [240, 333], [241, 334], [242, 332], [242, 370], [242, 371], [243, 245], [244, 245], [245, 329], [246, 248], [247, 248], [248, 330], [248, 331], [249, 255], [250, 258], [251, 252], [251, 253], [251, 256], [251, 258], [252, 404], [253, 254], [254, 255], [256, 405], [257, 260], [258, 260], [259, 326], [260, 327], [260, 328], [261, 264], [262, 290], [263, 264], [263, 265], [263, 269], [263, 270], [263, 271], [263, 273], [263, 275], [263, 276], [263, 278], [263, 279], [263, 283], [263, 285], [263, 286], [263, 287], [263, 288], [263, 289], [263, 290], [263, 297], [264, 410], [265, 266], [265, 267], [265, 268], [270, 411], [271, 272], [273, 274], [273, 350], [275, 356], [275, 357], [276, 277], [278, 360], [279, 280], [279, 281], [279, 282], [283, 284], [285, 394], [286, 401], [287, 408], [288, 409], [288, 413], [289, 415], [289, 416], [289, 418], [289, 420], [290, 295], [291, 293], [291, 294], [292, 293], [292, 294], [292, 295], [296, 298], [297, 298], [297, 299], [297, 300], [297, 301], [297, 302], [297, 305], [297, 306], [297, 307], [297, 308], [299, 389], [302, 303], [302, 304], [305, 383], [305, 384], [309, 324], [310, 321], [311, 322], [311, 323], [311, 325], [312, 318], [313, 315], [314, 315], [315, 319], [315, 320], [316, 426], [317, 318], [317, 321], [317, 324], [317, 326], [317, 329], [317, 333], [317, 335], [317, 336], [317, 339], [317, 340], [317, 342], [317, 343], [317, 345], [317, 347], [317, 349], [317, 355], [317, 359], [317, 361], [317, 362], [317, 365], [317, 367], [317, 369], [317, 372], [317, 375], [317, 377], [317, 379], [317, 385], [317, 391], [317, 393], [317, 395], [317, 402], [317, 403], [317, 404], [317, 405], [317, 414], [317, 417], [317, 419], [317, 421], [317, 426], [318, 319], [318, 320], [321, 322], [321, 323], [324, 325], [326, 327], [326, 328], [329, 330], [329, 331], [329, 332], [333, 334], [335, 390], [336, 337], [336, 338], [340, 341], [341, 344], [343, 344], [343, 353], [343, 354], [345, 346], [347, 348], [348, 351], [349, 350], [349, 352], [350, 351], [352, 353], [352, 354], [355, 356], [355, 357], [357, 358], [359, 360], [361, 364], [362, 363], [363, 364], [363, 399], [363, 400], [365, 366], [367, 368], [369, 370], [369, 371], [372, 373], [372, 374], [375, 376], [377, 378], [379, 380], [379, 381], [379, 382], [382, 383], [382, 384], [385, 386], [385, 387], [385, 388], [388, 389], [388, 390], [388, 392], [391, 392], [393, 394], [395, 396], [395, 397], [395, 398], [395, 401], [398, 399], [398, 400], [404, 438], [405, 406], [405, 407], [405, 408], [408, 409], [408, 410], [408, 411], [408, 412], [408, 413], [414, 415], [414, 416], [417, 418], [419, 420], [421, 422], [423, 425], [424, 425], [425, 427], [425, 428], [426, 427], [426, 428], [429, 433], [430, 432], [431, 432], [431, 433], [431, 434], [431, 436], [431, 440], [434, 435], [436, 437], [437, 438], [439, 441], [440, 441]]
        elif para_init.num_latent == 5:
            para['list_edges'] = [[1, 6], [7, 419], [8, 414], [8, 417], [9, 288], [10, 252], [10, 253], [10, 256], [11, 435], [11, 437], [12, 434], [13, 30], [14, 28], [14, 29], [14, 402], [14, 403], [15, 17], [16, 17], [16, 240], [17, 242], [18, 236], [18, 240], [19, 235], [20, 283], [20, 285], [21, 279], [22, 207], [23, 203], [24, 127], [25, 127], [26, 103], [26, 156], [27, 28], [27, 29], [27, 31], [27, 32], [27, 103], [27, 156], [27, 317], [28, 306], [28, 307], [29, 30], [29, 242], [30, 254], [32, 308], [33, 35], [34, 35], [35, 382], [36, 40], [37, 39], [37, 40], [38, 39], [39, 167], [40, 377], [40, 379], [41, 48], [42, 45], [43, 45], [44, 46], [44, 47], [45, 46], [45, 47], [45, 48], [48, 378], [49, 51], [50, 51], [51, 380], [51, 381], [52, 104], [53, 55], [54, 55], [55, 65], [56, 58], [57, 58], [58, 65], [59, 61], [59, 62], [60, 61], [60, 62], [61, 422], [62, 67], [62, 68], [63, 66], [64, 375], [65, 66], [65, 67], [65, 68], [65, 105], [65, 106], [66, 376], [69, 119], [70, 118], [71, 369], [71, 372], [72, 74], [73, 74], [74, 114], [74, 116], [75, 77], [76, 77], [77, 109], [77, 111], [77, 112], [77, 113], [78, 84], [79, 83], [80, 303], [80, 304], [81, 85], [82, 83], [82, 84], [82, 85], [83, 302], [84, 110], [85, 163], [86, 160], [86, 162], [87, 367], [87, 393], [87, 395], [88, 90], [88, 91], [88, 97], [88, 150], [89, 90], [89, 91], [89, 97], [89, 150], [90, 368], [91, 161], [92, 96], [92, 440], [93, 95], [94, 95], [94, 96], [96, 100], [97, 99], [97, 101], [97, 102], [98, 99], [98, 100], [98, 101], [98, 102], [102, 126], [103, 104], [103, 108], [103, 115], [103, 117], [103, 120], [103, 124], [103, 305], [104, 105], [104, 106], [107, 108], [107, 115], [107, 117], [107, 118], [107, 119], [107, 120], [107, 124], [108, 109], [108, 111], [108, 112], [108, 113], [109, 110], [113, 114], [115, 116], [118, 373], [118, 374], [120, 122], [120, 123], [121, 122], [121, 123], [121, 125], [124, 125], [124, 159], [125, 126], [127, 158], [127, 194], [127, 365], [128, 130], [128, 131], [129, 130], [129, 131], [131, 366], [132, 134], [133, 134], [134, 363], [135, 362], [136, 138], [137, 138], [138, 148], [138, 359], [138, 361], [139, 147], [140, 143], [141, 143], [141, 147], [142, 144], [143, 144], [143, 277], [144, 412], [145, 276], [146, 149], [147, 148], [147, 149], [149, 223], [149, 224], [150, 396], [150, 397], [150, 398], [151, 153], [151, 154], [152, 153], [152, 154], [153, 165], [154, 164], [154, 166], [155, 157], [156, 157], [156, 158], [156, 160], [156, 162], [156, 167], [156, 171], [156, 194], [158, 159], [160, 161], [162, 163], [163, 164], [163, 165], [163, 166], [168, 170], [169, 170], [170, 171], [171, 358], [172, 275], [173, 355], [174, 233], [175, 177], [175, 232], [176, 177], [177, 179], [178, 179], [180, 349], [181, 183], [181, 184], [181, 273], [181, 287], [182, 183], [182, 184], [183, 406], [183, 407], [184, 300], [184, 301], [185, 237], [186, 345], [186, 347], [186, 385], [187, 189], [188, 189], [189, 339], [189, 340], [189, 342], [189, 343], [190, 192], [191, 192], [192, 195], [192, 196], [192, 197], [192, 198], [192, 199], [192, 200], [193, 336], [194, 195], [194, 196], [194, 197], [194, 198], [194, 199], [194, 200], [194, 234], [194, 337], [194, 338], [194, 346], [194, 348], [194, 386], [194, 387], [194, 388], [201, 204], [202, 203], [202, 204], [202, 207], [203, 391], [204, 206], [204, 335], [205, 206], [206, 299], [207, 221], [207, 222], [207, 225], [208, 210], [209, 210], [210, 219], [210, 220], [211, 217], [211, 218], [212, 214], [213, 214], [214, 216], [215, 216], [215, 217], [215, 218], [215, 219], [215, 220], [215, 221], [215, 222], [215, 223], [215, 224], [215, 225], [215, 272], [215, 280], [215, 281], [215, 282], [215, 284], [226, 271], [227, 231], [228, 230], [229, 230], [229, 231], [229, 232], [229, 235], [229, 236], [232, 233], [232, 341], [232, 352], [233, 234], [235, 269], [235, 270], [235, 286], [236, 237], [236, 265], [236, 278], [237, 274], [238, 267], [238, 268], [239, 266], [240, 297], [240, 333], [241, 334], [242, 332], [242, 370], [242, 371], [243, 245], [244, 245], [245, 329], [246, 248], [247, 248], [248, 330], [248, 331], [249, 255], [250, 258], [251, 252], [251, 253], [251, 256], [251, 258], [252, 404], [253, 254], [254, 255], [256, 405], [257, 260], [258, 260], [259, 326], [260, 327], [260, 328], [261, 264], [262, 290], [263, 264], [263, 265], [263, 269], [263, 270], [263, 271], [263, 273], [263, 275], [263, 276], [263, 278], [263, 279], [263, 283], [263, 285], [263, 286], [263, 287], [263, 288], [263, 289], [263, 290], [263, 297], [264, 410], [265, 266], [265, 267], [265, 268], [270, 411], [271, 272], [273, 274], [273, 350], [275, 356], [275, 357], [276, 277], [278, 360], [279, 280], [279, 281], [279, 282], [283, 284], [285, 394], [286, 401], [287, 408], [288, 409], [288, 413], [289, 415], [289, 416], [289, 418], [289, 420], [290, 295], [291, 293], [291, 294], [292, 293], [292, 294], [292, 295], [296, 298], [297, 298], [297, 299], [297, 300], [297, 301], [297, 302], [297, 305], [297, 306], [297, 307], [297, 308], [299, 389], [302, 303], [302, 304], [305, 383], [305, 384], [309, 324], [310, 321], [311, 322], [311, 323], [311, 325], [312, 318], [313, 315], [314, 315], [315, 319], [315, 320], [316, 426], [317, 318], [317, 321], [317, 324], [317, 326], [317, 329], [317, 333], [317, 335], [317, 336], [317, 339], [317, 340], [317, 342], [317, 343], [317, 345], [317, 347], [317, 349], [317, 355], [317, 359], [317, 361], [317, 362], [317, 365], [317, 367], [317, 369], [317, 372], [317, 375], [317, 377], [317, 379], [317, 385], [317, 391], [317, 393], [317, 395], [317, 402], [317, 403], [317, 404], [317, 405], [317, 414], [317, 417], [317, 419], [317, 421], [317, 426], [318, 319], [318, 320], [321, 322], [321, 323], [324, 325], [326, 327], [326, 328], [329, 330], [329, 331], [329, 332], [333, 334], [335, 390], [336, 337], [336, 338], [340, 341], [341, 344], [343, 344], [343, 353], [343, 354], [345, 346], [347, 348], [348, 351], [349, 350], [349, 352], [350, 351], [352, 353], [352, 354], [355, 356], [355, 357], [357, 358], [359, 360], [361, 364], [362, 363], [363, 364], [363, 399], [363, 400], [365, 366], [367, 368], [369, 370], [369, 371], [372, 373], [372, 374], [375, 376], [377, 378], [379, 380], [379, 381], [379, 382], [382, 383], [382, 384], [385, 386], [385, 387], [385, 388], [388, 389], [388, 390], [388, 392], [391, 392], [393, 394], [395, 396], [395, 397], [395, 398], [395, 401], [398, 399], [398, 400], [404, 438], [405, 406], [405, 407], [405, 408], [408, 409], [408, 410], [408, 411], [408, 412], [408, 413], [414, 415], [414, 416], [417, 418], [419, 420], [421, 422], [423, 425], [424, 425], [425, 427], [425, 428], [426, 427], [426, 428], [429, 433], [430, 432], [431, 432], [431, 433], [431, 434], [431, 436], [431, 440], [434, 435], [436, 437], [437, 438], [439, 441], [440, 441]]
        elif para_init.num_latent == 7:
            para['list_edges'] = [[1, 8], [9, 288], [10, 252], [10, 253], [10, 256], [11, 435], [11, 437], [12, 434], [13, 30], [14, 28], [14, 29], [14, 402], [14, 403], [15, 17], [16, 17], [16, 240], [17, 242], [18, 236], [18, 240], [19, 235], [20, 283], [20, 285], [21, 279], [22, 207], [23, 203], [24, 127], [25, 127], [26, 103], [26, 156], [27, 28], [27, 29], [27, 31], [27, 32], [27, 103], [27, 156], [27, 317], [28, 306], [28, 307], [29, 30], [29, 242], [30, 254], [32, 308], [33, 35], [34, 35], [35, 382], [36, 40], [37, 39], [37, 40], [38, 39], [39, 167], [40, 377], [40, 379], [41, 48], [42, 45], [43, 45], [44, 46], [44, 47], [45, 46], [45, 47], [45, 48], [48, 378], [49, 51], [50, 51], [51, 380], [51, 381], [52, 104], [53, 55], [54, 55], [55, 65], [56, 58], [57, 58], [58, 65], [59, 61], [59, 62], [60, 61], [60, 62], [61, 422], [62, 67], [62, 68], [63, 66], [64, 375], [65, 66], [65, 67], [65, 68], [65, 105], [65, 106], [66, 376], [69, 119], [70, 118], [71, 369], [71, 372], [72, 74], [73, 74], [74, 114], [74, 116], [75, 77], [76, 77], [77, 109], [77, 111], [77, 112], [77, 113], [78, 84], [79, 83], [80, 303], [80, 304], [81, 85], [82, 83], [82, 84], [82, 85], [83, 302], [84, 110], [85, 163], [86, 160], [86, 162], [87, 367], [87, 393], [87, 395], [88, 90], [88, 91], [88, 97], [88, 150], [89, 90], [89, 91], [89, 97], [89, 150], [90, 368], [91, 161], [92, 96], [92, 440], [93, 95], [94, 95], [94, 96], [96, 100], [97, 99], [97, 101], [97, 102], [98, 99], [98, 100], [98, 101], [98, 102], [102, 126], [103, 104], [103, 108], [103, 115], [103, 117], [103, 120], [103, 124], [103, 305], [104, 105], [104, 106], [107, 108], [107, 115], [107, 117], [107, 118], [107, 119], [107, 120], [107, 124], [108, 109], [108, 111], [108, 112], [108, 113], [109, 110], [113, 114], [115, 116], [118, 373], [118, 374], [120, 122], [120, 123], [121, 122], [121, 123], [121, 125], [124, 125], [124, 159], [125, 126], [127, 158], [127, 194], [127, 365], [128, 130], [128, 131], [129, 130], [129, 131], [131, 366], [132, 134], [133, 134], [134, 363], [135, 362], [136, 138], [137, 138], [138, 148], [138, 359], [138, 361], [139, 147], [140, 143], [141, 143], [141, 147], [142, 144], [143, 144], [143, 277], [144, 412], [145, 276], [146, 149], [147, 148], [147, 149], [149, 223], [149, 224], [150, 396], [150, 397], [150, 398], [151, 153], [151, 154], [152, 153], [152, 154], [153, 165], [154, 164], [154, 166], [155, 157], [156, 157], [156, 158], [156, 160], [156, 162], [156, 167], [156, 171], [156, 194], [158, 159], [160, 161], [162, 163], [163, 164], [163, 165], [163, 166], [168, 170], [169, 170], [170, 171], [171, 358], [172, 275], [173, 355], [174, 233], [175, 177], [175, 232], [176, 177], [177, 179], [178, 179], [180, 349], [181, 183], [181, 184], [181, 273], [181, 287], [182, 183], [182, 184], [183, 406], [183, 407], [184, 300], [184, 301], [185, 237], [186, 345], [186, 347], [186, 385], [187, 189], [188, 189], [189, 339], [189, 340], [189, 342], [189, 343], [190, 192], [191, 192], [192, 195], [192, 196], [192, 197], [192, 198], [192, 199], [192, 200], [193, 336], [194, 195], [194, 196], [194, 197], [194, 198], [194, 199], [194, 200], [194, 234], [194, 337], [194, 338], [194, 346], [194, 348], [194, 386], [194, 387], [194, 388], [201, 204], [202, 203], [202, 204], [202, 207], [203, 391], [204, 206], [204, 335], [205, 206], [206, 299], [207, 221], [207, 222], [207, 225], [208, 210], [209, 210], [210, 219], [210, 220], [211, 217], [211, 218], [212, 214], [213, 214], [214, 216], [215, 216], [215, 217], [215, 218], [215, 219], [215, 220], [215, 221], [215, 222], [215, 223], [215, 224], [215, 225], [215, 272], [215, 280], [215, 281], [215, 282], [215, 284], [226, 271], [227, 231], [228, 230], [229, 230], [229, 231], [229, 232], [229, 235], [229, 236], [232, 233], [232, 341], [232, 352], [233, 234], [235, 269], [235, 270], [235, 286], [236, 237], [236, 265], [236, 278], [237, 274], [238, 267], [238, 268], [239, 266], [240, 297], [240, 333], [241, 334], [242, 332], [242, 370], [242, 371], [243, 245], [244, 245], [245, 329], [246, 248], [247, 248], [248, 330], [248, 331], [249, 255], [250, 258], [251, 252], [251, 253], [251, 256], [251, 258], [252, 404], [253, 254], [254, 255], [256, 405], [257, 260], [258, 260], [259, 326], [260, 327], [260, 328], [261, 264], [262, 290], [263, 264], [263, 265], [263, 269], [263, 270], [263, 271], [263, 273], [263, 275], [263, 276], [263, 278], [263, 279], [263, 283], [263, 285], [263, 286], [263, 287], [263, 288], [263, 289], [263, 290], [263, 297], [264, 410], [265, 266], [265, 267], [265, 268], [270, 411], [271, 272], [273, 274], [273, 350], [275, 356], [275, 357], [276, 277], [278, 360], [279, 280], [279, 281], [279, 282], [283, 284], [285, 394], [286, 401], [287, 408], [288, 409], [288, 413], [289, 415], [289, 416], [289, 418], [289, 420], [290, 295], [291, 293], [291, 294], [292, 293], [292, 294], [292, 295], [296, 298], [297, 298], [297, 299], [297, 300], [297, 301], [297, 302], [297, 305], [297, 306], [297, 307], [297, 308], [299, 389], [302, 303], [302, 304], [305, 383], [305, 384], [309, 324], [310, 321], [311, 322], [311, 323], [311, 325], [312, 318], [313, 315], [314, 315], [315, 319], [315, 320], [316, 426], [317, 318], [317, 321], [317, 324], [317, 326], [317, 329], [317, 333], [317, 335], [317, 336], [317, 339], [317, 340], [317, 342], [317, 343], [317, 345], [317, 347], [317, 349], [317, 355], [317, 359], [317, 361], [317, 362], [317, 365], [317, 367], [317, 369], [317, 372], [317, 375], [317, 377], [317, 379], [317, 385], [317, 391], [317, 393], [317, 395], [317, 402], [317, 403], [317, 404], [317, 405], [317, 414], [317, 417], [317, 419], [317, 421], [317, 426], [318, 319], [318, 320], [321, 322], [321, 323], [324, 325], [326, 327], [326, 328], [329, 330], [329, 331], [329, 332], [333, 334], [335, 390], [336, 337], [336, 338], [340, 341], [341, 344], [343, 344], [343, 353], [343, 354], [345, 346], [347, 348], [348, 351], [349, 350], [349, 352], [350, 351], [352, 353], [352, 354], [355, 356], [355, 357], [357, 358], [359, 360], [361, 364], [362, 363], [363, 364], [363, 399], [363, 400], [365, 366], [367, 368], [369, 370], [369, 371], [372, 373], [372, 374], [375, 376], [377, 378], [379, 380], [379, 381], [379, 382], [382, 383], [382, 384], [385, 386], [385, 387], [385, 388], [388, 389], [388, 390], [388, 392], [391, 392], [393, 394], [395, 396], [395, 397], [395, 398], [395, 401], [398, 399], [398, 400], [404, 438], [405, 406], [405, 407], [405, 408], [408, 409], [408, 410], [408, 411], [408, 412], [408, 413], [414, 415], [414, 416], [417, 418], [419, 420], [421, 422], [423, 425], [424, 425], [425, 427], [425, 428], [426, 427], [426, 428], [429, 433], [430, 432], [431, 432], [431, 433], [431, 434], [431, 436], [431, 440], [434, 435], [436, 437], [437, 438], [439, 441], [440, 441]]


    else:
        exit(0)

    for i in range(len(para['list_edges'])):
        if para['list_edges'][i][0] > para['num_VQVAE'] * para_init.num_latent:
            para['list_edges'][i][0] -= para['num_VQVAE'] * (para_init.num_latent - 1)
        if para['list_edges'][i][1] > para['num_VQVAE'] * para_init.num_latent:
            para['list_edges'][i][1] -= para['num_VQVAE'] * (para_init.num_latent - 1)
    print(para['list_edges']) # [[1, 2], [3, 4], [3, 11], [5, 9], [6, 7], [6, 9], [6, 11], [6, 14], [7, 8], [9, 10], [11, 12], [13, 14], [13, 17], [14, 15], [14, 18], [16, 17], [17, 18]]
    # exit(0)

    para['list_may_edges'] = []

    para['euclidean_threshold'] = np.sqrt(2)

    para['d_weight'] = 6e-7

    # para['BN_loss_ratio'] = 1e-6
    # para['BN_loss_ratio'] = 1e-5
    # para['BN_loss_ratio'] = 1e-4
    # para['BN_loss_ratio'] = 1e-3
    para['BN_loss_ratio'] = 1e-2

    # para['BN_loss_ratio'] = 5e-1

    # para['BN_loss_ratio'] = 1e-1
    # para['BN_loss_ratio'] = 1


    # para['list_evidence_node'] = [1, 2, 3, 4, 5, 6, 7, 8]
    # para['list_search_node'] = [13, 14, 15, 16]

    para['list_evidence_node'] = [para['list_node_index_VQVAE'].index(i) + 1 for i in para['list_evidence_node_temp']]
    para['list_search_node'] = [para['list_node_index_VQVAE'].index(i) + 1 for i in para['list_search_node_temp']]
    # print(para['list_evidence_node'])
    # print(para['list_search_node'])
    # exit(0)

    return para





def func_list_node_type(data_file, stage, num_var):
    list = []
    if stage == 'C':
        list.append("C")
    elif stage == 'D':
        list.append("D")

    for i in range(para_init.num_latent + 1, num_var + 1):
        list.append("D")
    return list


def func_list_cardinalities(data_file, stage, num_var, car_var):
    list = []
    if stage == 'C':
        list.append(para['hidden_embeddings_dim_VQVAE'][0])
    elif stage == 'D':
        list.append(para['k_VQVAE'][0])
    for i in range(para_init.num_latent, num_var):
        list.append(car_var[i])
    return list

def func_list_latent_variables(data_file, stage, num_var):
    list = []
    if stage == 'C':
        list.append(0)
    elif stage == 'D':
        list.append(1)
    for i in range(para_init.num_latent + 1, num_var + 1):
        list.append(0)
    return list

def func_list_correspond_observed_variables(data_file, stage, num_var): # 与隐变量有关的变量
    list = []
    if stage == 'C':
        list.append(0)
        for i in range(para_init.num_latent + 1, num_var + 1):
            list.append(0)
    elif stage == 'D':
        list.append(1)
        list.append(1)
        for i in range(para_init.num_latent + 1, num_var):
            list.append(0)
    return [i-1 for i in list]


